/**
 *
 *  Report.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Report.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string Report::Cols::_id = "\"id\"";
const std::string Report::Cols::_type = "\"type\"";
const std::string Report::Cols::_reason = "\"reason\"";
const std::string Report::Cols::_body = "\"body\"";
const std::string Report::Cols::_status = "\"status\"";
const std::string Report::Cols::_submitter_id = "\"submitter_id\"";
const std::string Report::Cols::_project_id = "\"project_id\"";
const std::string Report::Cols::_path = "\"path\"";
const std::string Report::Cols::_locale = "\"locale\"";
const std::string Report::Cols::_version_id = "\"version_id\"";
const std::string Report::Cols::_created_at = "\"created_at\"";
const std::string Report::primaryKeyName = "id";
const bool Report::hasPrimaryKey = true;
const std::string Report::tableName = "\"report\"";

const std::vector<typename Report::MetaData> Report::metaData_={
{"id","std::string","character varying",28,0,1,1},
{"type","std::string","character varying",255,0,0,1},
{"reason","std::string","text",0,0,0,1},
{"body","std::string","text",0,0,0,1},
{"status","std::string","character varying",255,0,0,1},
{"submitter_id","std::string","text",0,0,0,1},
{"project_id","std::string","text",0,0,0,1},
{"path","std::string","text",0,0,0,0},
{"locale","std::string","text",0,0,0,0},
{"version_id","int64_t","bigint",8,0,0,0},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &Report::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Report::Report(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<std::string>(r["id"].as<std::string>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["reason"].isNull())
        {
            reason_=std::make_shared<std::string>(r["reason"].as<std::string>());
        }
        if(!r["body"].isNull())
        {
            body_=std::make_shared<std::string>(r["body"].as<std::string>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<std::string>(r["status"].as<std::string>());
        }
        if(!r["submitter_id"].isNull())
        {
            submitterId_=std::make_shared<std::string>(r["submitter_id"].as<std::string>());
        }
        if(!r["project_id"].isNull())
        {
            projectId_=std::make_shared<std::string>(r["project_id"].as<std::string>());
        }
        if(!r["path"].isNull())
        {
            path_=std::make_shared<std::string>(r["path"].as<std::string>());
        }
        if(!r["locale"].isNull())
        {
            locale_=std::make_shared<std::string>(r["locale"].as<std::string>());
        }
        if(!r["version_id"].isNull())
        {
            versionId_=std::make_shared<int64_t>(r["version_id"].as<int64_t>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 11 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            type_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            reason_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            body_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            submitterId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            projectId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            path_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            locale_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            versionId_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Report::Report(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            reason_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            body_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            submitterId_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            projectId_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            path_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            locale_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            versionId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Report::Report(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("reason"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["reason"].isNull())
        {
            reason_=std::make_shared<std::string>(pJson["reason"].asString());
        }
    }
    if(pJson.isMember("body"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["body"].isNull())
        {
            body_=std::make_shared<std::string>(pJson["body"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("submitter_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["submitter_id"].isNull())
        {
            submitterId_=std::make_shared<std::string>(pJson["submitter_id"].asString());
        }
    }
    if(pJson.isMember("project_id"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["project_id"].isNull())
        {
            projectId_=std::make_shared<std::string>(pJson["project_id"].asString());
        }
    }
    if(pJson.isMember("path"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["path"].isNull())
        {
            path_=std::make_shared<std::string>(pJson["path"].asString());
        }
    }
    if(pJson.isMember("locale"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["locale"].isNull())
        {
            locale_=std::make_shared<std::string>(pJson["locale"].asString());
        }
    }
    if(pJson.isMember("version_id"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["version_id"].isNull())
        {
            versionId_=std::make_shared<int64_t>((int64_t)pJson["version_id"].asInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Report::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            reason_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            body_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            submitterId_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            projectId_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            path_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            locale_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            versionId_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Report::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("reason"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["reason"].isNull())
        {
            reason_=std::make_shared<std::string>(pJson["reason"].asString());
        }
    }
    if(pJson.isMember("body"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["body"].isNull())
        {
            body_=std::make_shared<std::string>(pJson["body"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("submitter_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["submitter_id"].isNull())
        {
            submitterId_=std::make_shared<std::string>(pJson["submitter_id"].asString());
        }
    }
    if(pJson.isMember("project_id"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["project_id"].isNull())
        {
            projectId_=std::make_shared<std::string>(pJson["project_id"].asString());
        }
    }
    if(pJson.isMember("path"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["path"].isNull())
        {
            path_=std::make_shared<std::string>(pJson["path"].asString());
        }
    }
    if(pJson.isMember("locale"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["locale"].isNull())
        {
            locale_=std::make_shared<std::string>(pJson["locale"].asString());
        }
    }
    if(pJson.isMember("version_id"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["version_id"].isNull())
        {
            versionId_=std::make_shared<int64_t>((int64_t)pJson["version_id"].asInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const std::string &Report::getValueOfId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Report::getId() const noexcept
{
    return id_;
}
void Report::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[0] = true;
}
void Report::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[0] = true;
}
const typename Report::PrimaryKeyType & Report::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Report::getValueOfType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Report::getType() const noexcept
{
    return type_;
}
void Report::setType(const std::string &pType) noexcept
{
    type_ = std::make_shared<std::string>(pType);
    dirtyFlag_[1] = true;
}
void Report::setType(std::string &&pType) noexcept
{
    type_ = std::make_shared<std::string>(std::move(pType));
    dirtyFlag_[1] = true;
}

const std::string &Report::getValueOfReason() const noexcept
{
    static const std::string defaultValue = std::string();
    if(reason_)
        return *reason_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Report::getReason() const noexcept
{
    return reason_;
}
void Report::setReason(const std::string &pReason) noexcept
{
    reason_ = std::make_shared<std::string>(pReason);
    dirtyFlag_[2] = true;
}
void Report::setReason(std::string &&pReason) noexcept
{
    reason_ = std::make_shared<std::string>(std::move(pReason));
    dirtyFlag_[2] = true;
}

const std::string &Report::getValueOfBody() const noexcept
{
    static const std::string defaultValue = std::string();
    if(body_)
        return *body_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Report::getBody() const noexcept
{
    return body_;
}
void Report::setBody(const std::string &pBody) noexcept
{
    body_ = std::make_shared<std::string>(pBody);
    dirtyFlag_[3] = true;
}
void Report::setBody(std::string &&pBody) noexcept
{
    body_ = std::make_shared<std::string>(std::move(pBody));
    dirtyFlag_[3] = true;
}

const std::string &Report::getValueOfStatus() const noexcept
{
    static const std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Report::getStatus() const noexcept
{
    return status_;
}
void Report::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[4] = true;
}
void Report::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[4] = true;
}

const std::string &Report::getValueOfSubmitterId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(submitterId_)
        return *submitterId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Report::getSubmitterId() const noexcept
{
    return submitterId_;
}
void Report::setSubmitterId(const std::string &pSubmitterId) noexcept
{
    submitterId_ = std::make_shared<std::string>(pSubmitterId);
    dirtyFlag_[5] = true;
}
void Report::setSubmitterId(std::string &&pSubmitterId) noexcept
{
    submitterId_ = std::make_shared<std::string>(std::move(pSubmitterId));
    dirtyFlag_[5] = true;
}

const std::string &Report::getValueOfProjectId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(projectId_)
        return *projectId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Report::getProjectId() const noexcept
{
    return projectId_;
}
void Report::setProjectId(const std::string &pProjectId) noexcept
{
    projectId_ = std::make_shared<std::string>(pProjectId);
    dirtyFlag_[6] = true;
}
void Report::setProjectId(std::string &&pProjectId) noexcept
{
    projectId_ = std::make_shared<std::string>(std::move(pProjectId));
    dirtyFlag_[6] = true;
}

const std::string &Report::getValueOfPath() const noexcept
{
    static const std::string defaultValue = std::string();
    if(path_)
        return *path_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Report::getPath() const noexcept
{
    return path_;
}
void Report::setPath(const std::string &pPath) noexcept
{
    path_ = std::make_shared<std::string>(pPath);
    dirtyFlag_[7] = true;
}
void Report::setPath(std::string &&pPath) noexcept
{
    path_ = std::make_shared<std::string>(std::move(pPath));
    dirtyFlag_[7] = true;
}
void Report::setPathToNull() noexcept
{
    path_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Report::getValueOfLocale() const noexcept
{
    static const std::string defaultValue = std::string();
    if(locale_)
        return *locale_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Report::getLocale() const noexcept
{
    return locale_;
}
void Report::setLocale(const std::string &pLocale) noexcept
{
    locale_ = std::make_shared<std::string>(pLocale);
    dirtyFlag_[8] = true;
}
void Report::setLocale(std::string &&pLocale) noexcept
{
    locale_ = std::make_shared<std::string>(std::move(pLocale));
    dirtyFlag_[8] = true;
}
void Report::setLocaleToNull() noexcept
{
    locale_.reset();
    dirtyFlag_[8] = true;
}

const int64_t &Report::getValueOfVersionId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(versionId_)
        return *versionId_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Report::getVersionId() const noexcept
{
    return versionId_;
}
void Report::setVersionId(const int64_t &pVersionId) noexcept
{
    versionId_ = std::make_shared<int64_t>(pVersionId);
    dirtyFlag_[9] = true;
}
void Report::setVersionIdToNull() noexcept
{
    versionId_.reset();
    dirtyFlag_[9] = true;
}

const ::trantor::Date &Report::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Report::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Report::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[10] = true;
}

void Report::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Report::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "type",
        "reason",
        "body",
        "status",
        "submitter_id",
        "project_id",
        "path",
        "locale",
        "version_id",
        "created_at"
    };
    return inCols;
}

void Report::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getReason())
        {
            binder << getValueOfReason();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getBody())
        {
            binder << getValueOfBody();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSubmitterId())
        {
            binder << getValueOfSubmitterId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPath())
        {
            binder << getValueOfPath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getLocale())
        {
            binder << getValueOfLocale();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getVersionId())
        {
            binder << getValueOfVersionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Report::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    return ret;
}

void Report::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getReason())
        {
            binder << getValueOfReason();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getBody())
        {
            binder << getValueOfBody();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getSubmitterId())
        {
            binder << getValueOfSubmitterId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPath())
        {
            binder << getValueOfPath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getLocale())
        {
            binder << getValueOfLocale();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getVersionId())
        {
            binder << getValueOfVersionId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Report::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getReason())
    {
        ret["reason"]=getValueOfReason();
    }
    else
    {
        ret["reason"]=Json::Value();
    }
    if(getBody())
    {
        ret["body"]=getValueOfBody();
    }
    else
    {
        ret["body"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getSubmitterId())
    {
        ret["submitter_id"]=getValueOfSubmitterId();
    }
    else
    {
        ret["submitter_id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getPath())
    {
        ret["path"]=getValueOfPath();
    }
    else
    {
        ret["path"]=Json::Value();
    }
    if(getLocale())
    {
        ret["locale"]=getValueOfLocale();
    }
    else
    {
        ret["locale"]=Json::Value();
    }
    if(getVersionId())
    {
        ret["version_id"]=(Json::Int64)getValueOfVersionId();
    }
    else
    {
        ret["version_id"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    return ret;
}

Json::Value Report::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 11)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[1]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getReason())
            {
                ret[pMasqueradingVector[2]]=getValueOfReason();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getBody())
            {
                ret[pMasqueradingVector[3]]=getValueOfBody();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[4]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getSubmitterId())
            {
                ret[pMasqueradingVector[5]]=getValueOfSubmitterId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getProjectId())
            {
                ret[pMasqueradingVector[6]]=getValueOfProjectId();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getPath())
            {
                ret[pMasqueradingVector[7]]=getValueOfPath();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getLocale())
            {
                ret[pMasqueradingVector[8]]=getValueOfLocale();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getVersionId())
            {
                ret[pMasqueradingVector[9]]=(Json::Int64)getValueOfVersionId();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[10]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getReason())
    {
        ret["reason"]=getValueOfReason();
    }
    else
    {
        ret["reason"]=Json::Value();
    }
    if(getBody())
    {
        ret["body"]=getValueOfBody();
    }
    else
    {
        ret["body"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getSubmitterId())
    {
        ret["submitter_id"]=getValueOfSubmitterId();
    }
    else
    {
        ret["submitter_id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getPath())
    {
        ret["path"]=getValueOfPath();
    }
    else
    {
        ret["path"]=Json::Value();
    }
    if(getLocale())
    {
        ret["locale"]=getValueOfLocale();
    }
    else
    {
        ret["locale"]=Json::Value();
    }
    if(getVersionId())
    {
        ret["version_id"]=(Json::Int64)getValueOfVersionId();
    }
    else
    {
        ret["version_id"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    return ret;
}

bool Report::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    else
    {
        err="The id column cannot be null";
        return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(1, "type", pJson["type"], err, true))
            return false;
    }
    else
    {
        err="The type column cannot be null";
        return false;
    }
    if(pJson.isMember("reason"))
    {
        if(!validJsonOfField(2, "reason", pJson["reason"], err, true))
            return false;
    }
    else
    {
        err="The reason column cannot be null";
        return false;
    }
    if(pJson.isMember("body"))
    {
        if(!validJsonOfField(3, "body", pJson["body"], err, true))
            return false;
    }
    else
    {
        err="The body column cannot be null";
        return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(4, "status", pJson["status"], err, true))
            return false;
    }
    else
    {
        err="The status column cannot be null";
        return false;
    }
    if(pJson.isMember("submitter_id"))
    {
        if(!validJsonOfField(5, "submitter_id", pJson["submitter_id"], err, true))
            return false;
    }
    else
    {
        err="The submitter_id column cannot be null";
        return false;
    }
    if(pJson.isMember("project_id"))
    {
        if(!validJsonOfField(6, "project_id", pJson["project_id"], err, true))
            return false;
    }
    else
    {
        err="The project_id column cannot be null";
        return false;
    }
    if(pJson.isMember("path"))
    {
        if(!validJsonOfField(7, "path", pJson["path"], err, true))
            return false;
    }
    if(pJson.isMember("locale"))
    {
        if(!validJsonOfField(8, "locale", pJson["locale"], err, true))
            return false;
    }
    if(pJson.isMember("version_id"))
    {
        if(!validJsonOfField(9, "version_id", pJson["version_id"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(10, "created_at", pJson["created_at"], err, true))
            return false;
    }
    return true;
}
bool Report::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Report::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(1, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("reason"))
    {
        if(!validJsonOfField(2, "reason", pJson["reason"], err, false))
            return false;
    }
    if(pJson.isMember("body"))
    {
        if(!validJsonOfField(3, "body", pJson["body"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(4, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("submitter_id"))
    {
        if(!validJsonOfField(5, "submitter_id", pJson["submitter_id"], err, false))
            return false;
    }
    if(pJson.isMember("project_id"))
    {
        if(!validJsonOfField(6, "project_id", pJson["project_id"], err, false))
            return false;
    }
    if(pJson.isMember("path"))
    {
        if(!validJsonOfField(7, "path", pJson["path"], err, false))
            return false;
    }
    if(pJson.isMember("locale"))
    {
        if(!validJsonOfField(8, "locale", pJson["locale"], err, false))
            return false;
    }
    if(pJson.isMember("version_id"))
    {
        if(!validJsonOfField(9, "version_id", pJson["version_id"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(10, "created_at", pJson["created_at"], err, false))
            return false;
    }
    return true;
}
bool Report::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Report::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 28)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 28)";
                return false;
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
