/**
 *
 *  ProjectIssue.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ProjectIssue.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string ProjectIssue::Cols::_id = "\"id\"";
const std::string ProjectIssue::Cols::_project_id = "\"project_id\"";
const std::string ProjectIssue::Cols::_level = "\"level\"";
const std::string ProjectIssue::Cols::_page_path = "\"page_path\"";
const std::string ProjectIssue::Cols::_deployment_id = "\"deployment_id\"";
const std::string ProjectIssue::Cols::_body = "\"body\"";
const std::string ProjectIssue::Cols::_created_at = "\"created_at\"";
const std::string ProjectIssue::primaryKeyName = "id";
const bool ProjectIssue::hasPrimaryKey = true;
const std::string ProjectIssue::tableName = "\"project_issue\"";

const std::vector<typename ProjectIssue::MetaData> ProjectIssue::metaData_={
{"id","std::string","character varying",28,0,1,1},
{"project_id","std::string","text",0,0,0,1},
{"level","std::string","character varying",255,0,0,1},
{"page_path","std::string","text",0,0,0,0},
{"deployment_id","std::string","character varying",28,0,0,0},
{"body","std::string","jsonb",0,0,0,1},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,1}
};
const std::string &ProjectIssue::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
ProjectIssue::ProjectIssue(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<std::string>(r["id"].as<std::string>());
        }
        if(!r["project_id"].isNull())
        {
            projectId_=std::make_shared<std::string>(r["project_id"].as<std::string>());
        }
        if(!r["level"].isNull())
        {
            level_=std::make_shared<std::string>(r["level"].as<std::string>());
        }
        if(!r["page_path"].isNull())
        {
            pagePath_=std::make_shared<std::string>(r["page_path"].as<std::string>());
        }
        if(!r["deployment_id"].isNull())
        {
            deploymentId_=std::make_shared<std::string>(r["deployment_id"].as<std::string>());
        }
        if(!r["body"].isNull())
        {
            body_=std::make_shared<std::string>(r["body"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 7 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            projectId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            level_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            pagePath_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            deploymentId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            body_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

ProjectIssue::ProjectIssue(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            projectId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            level_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            pagePath_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            deploymentId_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            body_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

ProjectIssue::ProjectIssue(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("project_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["project_id"].isNull())
        {
            projectId_=std::make_shared<std::string>(pJson["project_id"].asString());
        }
    }
    if(pJson.isMember("level"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["level"].isNull())
        {
            level_=std::make_shared<std::string>(pJson["level"].asString());
        }
    }
    if(pJson.isMember("page_path"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["page_path"].isNull())
        {
            pagePath_=std::make_shared<std::string>(pJson["page_path"].asString());
        }
    }
    if(pJson.isMember("deployment_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["deployment_id"].isNull())
        {
            deploymentId_=std::make_shared<std::string>(pJson["deployment_id"].asString());
        }
    }
    if(pJson.isMember("body"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["body"].isNull())
        {
            body_=std::make_shared<std::string>(pJson["body"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void ProjectIssue::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 7)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            projectId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            level_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            pagePath_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            deploymentId_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            body_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void ProjectIssue::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("project_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["project_id"].isNull())
        {
            projectId_=std::make_shared<std::string>(pJson["project_id"].asString());
        }
    }
    if(pJson.isMember("level"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["level"].isNull())
        {
            level_=std::make_shared<std::string>(pJson["level"].asString());
        }
    }
    if(pJson.isMember("page_path"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["page_path"].isNull())
        {
            pagePath_=std::make_shared<std::string>(pJson["page_path"].asString());
        }
    }
    if(pJson.isMember("deployment_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["deployment_id"].isNull())
        {
            deploymentId_=std::make_shared<std::string>(pJson["deployment_id"].asString());
        }
    }
    if(pJson.isMember("body"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["body"].isNull())
        {
            body_=std::make_shared<std::string>(pJson["body"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const std::string &ProjectIssue::getValueOfId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ProjectIssue::getId() const noexcept
{
    return id_;
}
void ProjectIssue::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[0] = true;
}
void ProjectIssue::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[0] = true;
}
const typename ProjectIssue::PrimaryKeyType & ProjectIssue::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &ProjectIssue::getValueOfProjectId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(projectId_)
        return *projectId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ProjectIssue::getProjectId() const noexcept
{
    return projectId_;
}
void ProjectIssue::setProjectId(const std::string &pProjectId) noexcept
{
    projectId_ = std::make_shared<std::string>(pProjectId);
    dirtyFlag_[1] = true;
}
void ProjectIssue::setProjectId(std::string &&pProjectId) noexcept
{
    projectId_ = std::make_shared<std::string>(std::move(pProjectId));
    dirtyFlag_[1] = true;
}

const std::string &ProjectIssue::getValueOfLevel() const noexcept
{
    static const std::string defaultValue = std::string();
    if(level_)
        return *level_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ProjectIssue::getLevel() const noexcept
{
    return level_;
}
void ProjectIssue::setLevel(const std::string &pLevel) noexcept
{
    level_ = std::make_shared<std::string>(pLevel);
    dirtyFlag_[2] = true;
}
void ProjectIssue::setLevel(std::string &&pLevel) noexcept
{
    level_ = std::make_shared<std::string>(std::move(pLevel));
    dirtyFlag_[2] = true;
}

const std::string &ProjectIssue::getValueOfPagePath() const noexcept
{
    static const std::string defaultValue = std::string();
    if(pagePath_)
        return *pagePath_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ProjectIssue::getPagePath() const noexcept
{
    return pagePath_;
}
void ProjectIssue::setPagePath(const std::string &pPagePath) noexcept
{
    pagePath_ = std::make_shared<std::string>(pPagePath);
    dirtyFlag_[3] = true;
}
void ProjectIssue::setPagePath(std::string &&pPagePath) noexcept
{
    pagePath_ = std::make_shared<std::string>(std::move(pPagePath));
    dirtyFlag_[3] = true;
}
void ProjectIssue::setPagePathToNull() noexcept
{
    pagePath_.reset();
    dirtyFlag_[3] = true;
}

const std::string &ProjectIssue::getValueOfDeploymentId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(deploymentId_)
        return *deploymentId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ProjectIssue::getDeploymentId() const noexcept
{
    return deploymentId_;
}
void ProjectIssue::setDeploymentId(const std::string &pDeploymentId) noexcept
{
    deploymentId_ = std::make_shared<std::string>(pDeploymentId);
    dirtyFlag_[4] = true;
}
void ProjectIssue::setDeploymentId(std::string &&pDeploymentId) noexcept
{
    deploymentId_ = std::make_shared<std::string>(std::move(pDeploymentId));
    dirtyFlag_[4] = true;
}
void ProjectIssue::setDeploymentIdToNull() noexcept
{
    deploymentId_.reset();
    dirtyFlag_[4] = true;
}

const std::string &ProjectIssue::getValueOfBody() const noexcept
{
    static const std::string defaultValue = std::string();
    if(body_)
        return *body_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ProjectIssue::getBody() const noexcept
{
    return body_;
}
void ProjectIssue::setBody(const std::string &pBody) noexcept
{
    body_ = std::make_shared<std::string>(pBody);
    dirtyFlag_[5] = true;
}
void ProjectIssue::setBody(std::string &&pBody) noexcept
{
    body_ = std::make_shared<std::string>(std::move(pBody));
    dirtyFlag_[5] = true;
}

const ::trantor::Date &ProjectIssue::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &ProjectIssue::getCreatedAt() const noexcept
{
    return createdAt_;
}
void ProjectIssue::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[6] = true;
}

void ProjectIssue::updateId(const uint64_t id)
{
}

const std::vector<std::string> &ProjectIssue::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "project_id",
        "level",
        "page_path",
        "deployment_id",
        "body",
        "created_at"
    };
    return inCols;
}

void ProjectIssue::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLevel())
        {
            binder << getValueOfLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPagePath())
        {
            binder << getValueOfPagePath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDeploymentId())
        {
            binder << getValueOfDeploymentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getBody())
        {
            binder << getValueOfBody();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> ProjectIssue::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    return ret;
}

void ProjectIssue::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getLevel())
        {
            binder << getValueOfLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getPagePath())
        {
            binder << getValueOfPagePath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDeploymentId())
        {
            binder << getValueOfDeploymentId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getBody())
        {
            binder << getValueOfBody();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ProjectIssue::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getLevel())
    {
        ret["level"]=getValueOfLevel();
    }
    else
    {
        ret["level"]=Json::Value();
    }
    if(getPagePath())
    {
        ret["page_path"]=getValueOfPagePath();
    }
    else
    {
        ret["page_path"]=Json::Value();
    }
    if(getDeploymentId())
    {
        ret["deployment_id"]=getValueOfDeploymentId();
    }
    else
    {
        ret["deployment_id"]=Json::Value();
    }
    if(getBody())
    {
        ret["body"]=getValueOfBody();
    }
    else
    {
        ret["body"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    return ret;
}

Json::Value ProjectIssue::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 7)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getProjectId())
            {
                ret[pMasqueradingVector[1]]=getValueOfProjectId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getLevel())
            {
                ret[pMasqueradingVector[2]]=getValueOfLevel();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getPagePath())
            {
                ret[pMasqueradingVector[3]]=getValueOfPagePath();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDeploymentId())
            {
                ret[pMasqueradingVector[4]]=getValueOfDeploymentId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getBody())
            {
                ret[pMasqueradingVector[5]]=getValueOfBody();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[6]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getLevel())
    {
        ret["level"]=getValueOfLevel();
    }
    else
    {
        ret["level"]=Json::Value();
    }
    if(getPagePath())
    {
        ret["page_path"]=getValueOfPagePath();
    }
    else
    {
        ret["page_path"]=Json::Value();
    }
    if(getDeploymentId())
    {
        ret["deployment_id"]=getValueOfDeploymentId();
    }
    else
    {
        ret["deployment_id"]=Json::Value();
    }
    if(getBody())
    {
        ret["body"]=getValueOfBody();
    }
    else
    {
        ret["body"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    return ret;
}

bool ProjectIssue::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    else
    {
        err="The id column cannot be null";
        return false;
    }
    if(pJson.isMember("project_id"))
    {
        if(!validJsonOfField(1, "project_id", pJson["project_id"], err, true))
            return false;
    }
    else
    {
        err="The project_id column cannot be null";
        return false;
    }
    if(pJson.isMember("level"))
    {
        if(!validJsonOfField(2, "level", pJson["level"], err, true))
            return false;
    }
    else
    {
        err="The level column cannot be null";
        return false;
    }
    if(pJson.isMember("page_path"))
    {
        if(!validJsonOfField(3, "page_path", pJson["page_path"], err, true))
            return false;
    }
    if(pJson.isMember("deployment_id"))
    {
        if(!validJsonOfField(4, "deployment_id", pJson["deployment_id"], err, true))
            return false;
    }
    if(pJson.isMember("body"))
    {
        if(!validJsonOfField(5, "body", pJson["body"], err, true))
            return false;
    }
    else
    {
        err="The body column cannot be null";
        return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(6, "created_at", pJson["created_at"], err, true))
            return false;
    }
    return true;
}
bool ProjectIssue::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ProjectIssue::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("project_id"))
    {
        if(!validJsonOfField(1, "project_id", pJson["project_id"], err, false))
            return false;
    }
    if(pJson.isMember("level"))
    {
        if(!validJsonOfField(2, "level", pJson["level"], err, false))
            return false;
    }
    if(pJson.isMember("page_path"))
    {
        if(!validJsonOfField(3, "page_path", pJson["page_path"], err, false))
            return false;
    }
    if(pJson.isMember("deployment_id"))
    {
        if(!validJsonOfField(4, "deployment_id", pJson["deployment_id"], err, false))
            return false;
    }
    if(pJson.isMember("body"))
    {
        if(!validJsonOfField(5, "body", pJson["body"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(6, "created_at", pJson["created_at"], err, false))
            return false;
    }
    return true;
}
bool ProjectIssue::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 7)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ProjectIssue::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 28)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 28)";
                return false;
            }

            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 28)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 28)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
