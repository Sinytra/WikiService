/**
 *
 *  UserProject.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "UserProject.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string UserProject::Cols::_user_id = "\"user_id\"";
const std::string UserProject::Cols::_project_id = "\"project_id\"";
const std::string UserProject::Cols::_role = "\"role\"";
const std::vector<std::string> UserProject::primaryKeyName = {"user_id","project_id"};
const bool UserProject::hasPrimaryKey = true;
const std::string UserProject::tableName = "\"user_project\"";

const std::vector<typename UserProject::MetaData> UserProject::metaData_={
{"user_id","std::string","text",0,0,1,1},
{"project_id","std::string","text",0,0,1,1},
{"role","std::string","character varying",255,0,0,1}
};
const std::string &UserProject::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
UserProject::UserProject(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<std::string>(r["user_id"].as<std::string>());
        }
        if(!r["project_id"].isNull())
        {
            projectId_=std::make_shared<std::string>(r["project_id"].as<std::string>());
        }
        if(!r["role"].isNull())
        {
            role_=std::make_shared<std::string>(r["role"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            projectId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            role_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

UserProject::UserProject(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            projectId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            role_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

UserProject::UserProject(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<std::string>(pJson["user_id"].asString());
        }
    }
    if(pJson.isMember("project_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["project_id"].isNull())
        {
            projectId_=std::make_shared<std::string>(pJson["project_id"].asString());
        }
    }
    if(pJson.isMember("role"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["role"].isNull())
        {
            role_=std::make_shared<std::string>(pJson["role"].asString());
        }
    }
}

void UserProject::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            projectId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            role_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void UserProject::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<std::string>(pJson["user_id"].asString());
        }
    }
    if(pJson.isMember("project_id"))
    {
        if(!pJson["project_id"].isNull())
        {
            projectId_=std::make_shared<std::string>(pJson["project_id"].asString());
        }
    }
    if(pJson.isMember("role"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["role"].isNull())
        {
            role_=std::make_shared<std::string>(pJson["role"].asString());
        }
    }
}

const std::string &UserProject::getValueOfUserId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserProject::getUserId() const noexcept
{
    return userId_;
}
void UserProject::setUserId(const std::string &pUserId) noexcept
{
    userId_ = std::make_shared<std::string>(pUserId);
    dirtyFlag_[0] = true;
}
void UserProject::setUserId(std::string &&pUserId) noexcept
{
    userId_ = std::make_shared<std::string>(std::move(pUserId));
    dirtyFlag_[0] = true;
}

const std::string &UserProject::getValueOfProjectId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(projectId_)
        return *projectId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserProject::getProjectId() const noexcept
{
    return projectId_;
}
void UserProject::setProjectId(const std::string &pProjectId) noexcept
{
    projectId_ = std::make_shared<std::string>(pProjectId);
    dirtyFlag_[1] = true;
}
void UserProject::setProjectId(std::string &&pProjectId) noexcept
{
    projectId_ = std::make_shared<std::string>(std::move(pProjectId));
    dirtyFlag_[1] = true;
}

const std::string &UserProject::getValueOfRole() const noexcept
{
    static const std::string defaultValue = std::string();
    if(role_)
        return *role_;
    return defaultValue;
}
const std::shared_ptr<std::string> &UserProject::getRole() const noexcept
{
    return role_;
}
void UserProject::setRole(const std::string &pRole) noexcept
{
    role_ = std::make_shared<std::string>(pRole);
    dirtyFlag_[2] = true;
}
void UserProject::setRole(std::string &&pRole) noexcept
{
    role_ = std::make_shared<std::string>(std::move(pRole));
    dirtyFlag_[2] = true;
}

void UserProject::updateId(const uint64_t id)
{
}
typename UserProject::PrimaryKeyType UserProject::getPrimaryKey() const
{
    return std::make_tuple(*userId_,*projectId_);
}

const std::vector<std::string> &UserProject::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "user_id",
        "project_id",
        "role"
    };
    return inCols;
}

void UserProject::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRole())
        {
            binder << getValueOfRole();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> UserProject::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void UserProject::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getProjectId())
        {
            binder << getValueOfProjectId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getRole())
        {
            binder << getValueOfRole();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value UserProject::toJson() const
{
    Json::Value ret;
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getRole())
    {
        ret["role"]=getValueOfRole();
    }
    else
    {
        ret["role"]=Json::Value();
    }
    return ret;
}

Json::Value UserProject::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[0]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getProjectId())
            {
                ret[pMasqueradingVector[1]]=getValueOfProjectId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getRole())
            {
                ret[pMasqueradingVector[2]]=getValueOfRole();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getProjectId())
    {
        ret["project_id"]=getValueOfProjectId();
    }
    else
    {
        ret["project_id"]=Json::Value();
    }
    if(getRole())
    {
        ret["role"]=getValueOfRole();
    }
    else
    {
        ret["role"]=Json::Value();
    }
    return ret;
}

bool UserProject::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err="The user_id column cannot be null";
        return false;
    }
    if(pJson.isMember("project_id"))
    {
        if(!validJsonOfField(1, "project_id", pJson["project_id"], err, true))
            return false;
    }
    else
    {
        err="The project_id column cannot be null";
        return false;
    }
    if(pJson.isMember("role"))
    {
        if(!validJsonOfField(2, "role", pJson["role"], err, true))
            return false;
    }
    else
    {
        err="The role column cannot be null";
        return false;
    }
    return true;
}
bool UserProject::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserProject::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("project_id"))
    {
        if(!validJsonOfField(1, "project_id", pJson["project_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("role"))
    {
        if(!validJsonOfField(2, "role", pJson["role"], err, false))
            return false;
    }
    return true;
}
bool UserProject::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserProject::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
